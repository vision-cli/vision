# {{.ProjectName}}

## Local development

Mac or linux recommended

- Local k8s cluster _e.g._ [kind](https://kind.sigs.k8s.io/), [minikube](https://minikube.sigs.k8s.io/docs/start/), [docker desktop](https://docs.docker.com/desktop/kubernetes/),
- Container runtime _e.g._ [Docker](https://www.docker.com/products/docker-desktop/), [Podman](https://podman.io/), [Lima](https://github.com/lima-vm/lima)
- [kubectl](https://kubernetes.io/docs/tasks/tools/#kubectl)
- [Cilium](https://docs.cilium.io/en/stable/gettingstarted/)
- [Protobuf](https://grpc.io/docs/protoc-installation/)
- Golang protobuf generator [protoc-gen-go](https://developers.google.com/protocol-buffers/docs/reference/go-generated)
- Golang protobuf gen grpc [protoc-gen-go-grpc](https://pkg.go.dev/google.golang.org/grpc/cmd/protoc-gen-go-grpc)
- [gRPCurl](https://pkg.go.dev/github.com/fullstorydev/grpcurl#section-readme)

Remember to start a postgres db with a default database linked to the connecting sting in config, e.g:
```
docker run -e POSTGRES_PASSWORD=password -e POSTGRES_USER=user -p 5432:5432 postgres
```
And create a cerebro_apps database or a db with the name of your project if you're using a template

## [Docs](docs/)

### Cilium
Deploy cilium onto cluster with

`make cilium-deploy`

### Prometheus
Generate sample prometheus & grafana stack

`make prometheus-deploy`

### Grafana
View the sample grafana dashboards

`make grafana-port-forward`

### OpenTelemetry
Deploy cert-manager as it's a dependency of the OpenTelemetry operator

`make cert-manager-deploy`

`make cert-manager-status`

Deploy OpenTelemetry operator

`make opentelemetry-operator-deploy`

Deploy OpenTelemetry

`make opentelemetry-collector-deploy`

`make opentelemetry-collector-status`

`make opentelemetry-collector-logs`

### Jaeger
Deploy Jaeger operator

`make jaeger-operator-deploy`

Deploy Jaeger

`make jaeger-deploy`

Port forward to view Jaeger UI @ http://localhost:16686/search

`make jaeger-port-forward`

### Testing
- Generate grpc service
- Generate gateway service
- Port forward to the gateway service with `kubectl port-forward {podname} 8081:8081`
- Make a restful call to `http://localhost:8080/<namespace>/<serviceName>/v#/<method>`


